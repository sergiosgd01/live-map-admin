/*!
 * DataTables Bootstrap 5 integration
 * 2020 SpryMedia Ltd - datatables.net/license
 */

var $jscomp = $jscomp || {};
$jscomp.scope = {};

$jscomp.findInternal = function(a, b, c) {
  if (a instanceof String) {
    a = String(a);
  }
  var length = a.length;
  for (var i = 0; i < length; i++) {
    var value = a[i];
    if (b.call(c, value, i, a)) {
      return { i: i, v: value };
    }
  }
  return { i: -1, v: void 0 };
};

$jscomp.ASSUME_ES5 = false;
$jscomp.ASSUME_NO_NATIVE_MAP = false;
$jscomp.ASSUME_NO_NATIVE_SET = false;
$jscomp.SIMPLE_FROUND_POLYFILL = false;
$jscomp.ISOLATE_POLYFILLS = false;

$jscomp.defineProperty = ($jscomp.ASSUME_ES5 || typeof Object.defineProperties === "function")
  ? Object.defineProperty
  : function(obj, prop, descriptor) {
      if (obj == Array.prototype || obj == Object.prototype) return obj;
      obj[prop] = descriptor.value;
      return obj;
    };

$jscomp.getGlobal = function(a) {
  var possibleGlobals = [
    typeof globalThis === "object" && globalThis,
    a,
    typeof window === "object" && window,
    typeof self === "object" && self,
    typeof global === "object" && global
  ];
  for (var i = 0; i < possibleGlobals.length; ++i) {
    var globalCandidate = possibleGlobals[i];
    if (globalCandidate && globalCandidate.Math === Math) {
      return globalCandidate;
    }
  }
  throw Error("Cannot find global object");
};

$jscomp.global = $jscomp.getGlobal(this);

$jscomp.IS_SYMBOL_NATIVE =
  typeof Symbol === "function" && typeof Symbol("x") === "symbol";
$jscomp.TRUST_ES6_POLYFILLS = !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;
$jscomp.polyfills = {};
$jscomp.propertyToPolyfillSymbol = {};
$jscomp.POLYFILL_PREFIX = "$jscp$";

var $jscomp$lookupPolyfilledValue = function(obj, prop) {
  var polySymbol = $jscomp.propertyToPolyfillSymbol[prop];
  if (polySymbol == null) return obj[prop];
  polySymbol = obj[polySymbol];
  return polySymbol !== void 0 ? polySymbol : obj[prop];
};

$jscomp.polyfill = function(target, polyfillFn, language, runtime) {
  if (polyfillFn) {
    if ($jscomp.ISOLATE_POLYFILLS) {
      $jscomp.polyfillIsolated(target, polyfillFn, language, runtime);
    } else {
      $jscomp.polyfillUnisolated(target, polyfillFn, language, runtime);
    }
  }
};

$jscomp.polyfillUnisolated = function(target, polyfillFn, language, runtime) {
  var globalObj = $jscomp.global;
  var parts = target.split(".");
  for (var i = 0; i < parts.length - 1; i++) {
    var part = parts[i];
    if (!(part in globalObj)) return;
    globalObj = globalObj[part];
  }
  var property = parts[parts.length - 1];
  var orig = globalObj[property];
  var polyfillValue = polyfillFn(orig);
  if (polyfillValue != orig && polyfillValue != null) {
    $jscomp.defineProperty(globalObj, property, {
      configurable: true,
      writable: true,
      value: polyfillValue
    });
  }
};

$jscomp.polyfillIsolated = function(target, polyfillFn, language, runtime) {
  var parts = target.split(".");
  var isSinglePart = parts.length === 1;
  var globalObj = !isSinglePart && parts[0] in $jscomp.polyfills
    ? $jscomp.polyfills
    : $jscomp.global;
  for (var i = 0; i < parts.length - 1; i++) {
    var part = parts[i];
    if (!(part in globalObj)) return;
    globalObj = globalObj[part];
  }
  var property = parts[parts.length - 1];
  var orig = ($jscomp.IS_SYMBOL_NATIVE && language === "es6") ? globalObj[property] : null;
  var polyfillValue = polyfillFn(orig);
  if (polyfillValue != null) {
    if (isSinglePart) {
      $jscomp.defineProperty($jscomp.polyfills, property, {
        configurable: true,
        writable: true,
        value: polyfillValue
      });
    } else if (polyfillValue !== orig) {
      $jscomp.propertyToPolyfillSymbol[property] = $jscomp.IS_SYMBOL_NATIVE
        ? $jscomp.global.Symbol(property)
        : $jscomp.POLYFILL_PREFIX + property;
      var symbolProp = $jscomp.propertyToPolyfillSymbol[property];
      $jscomp.defineProperty(globalObj, symbolProp, {
        configurable: true,
        writable: true,
        value: polyfillValue
      });
    }
  }
};

$jscomp.polyfill("Array.prototype.find", function(orig) {
  return orig ? orig : function(predicate, thisArg) {
    return $jscomp.findInternal(this, predicate, thisArg).v;
  };
}, "es6", "es3");

/* DataTables Bootstrap 5 integration */
(function(factory) {
  if (typeof define === "function" && define.amd) {
    // AMD
    define(["jquery", "datatables.net"], function($) {
      return factory($, window, document);
    });
  } else if (typeof exports === "object") {
    // CommonJS
    module.exports = function(root, $) {
      root = root || window;
      if (!$ || !$.fn.dataTable) {
        $ = require("datatables.net")(root, $).$;
      }
      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
})(function($, window, document, undefined) {
  var DataTable = $.fn.dataTable;

  $.extend(true, DataTable.defaults, {
    dom: "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
    renderer: "bootstrap"
  });

  $.extend(DataTable.ext.classes, {
    sWrapper: "dataTables_wrapper dt-bootstrap5",
    sFilterInput: "form-control form-control-sm",
    sLengthSelect: "form-select form-select-sm",
    sProcessing: "dataTables_processing card",
    sPageButton: "paginate_button page-item"
  });

  DataTable.ext.renderer.pageButton.bootstrap = function(settings, host, idx, buttons, page, current) {
    var api = new DataTable.Api(settings);
    var classes = settings.oClasses;
    var lang = settings.oLanguage.oPaginate;
    var aria = settings.oLanguage.oAria.paginate || {};
    var btnDisplay, btnClass, counter = 0;

    var attach = function(container, buttons) {
      var i, ien, button;
      var clickHandler = function(e) {
        e.preventDefault();
        if ($(e.currentTarget).hasClass("disabled") || api.page() === e.data.action) {
          return;
        }
        api.page(e.data.action).draw("page");
      };

      for (i = 0, ien = buttons.length; i < ien; i++) {
        button = buttons[i];

        if (Array.isArray(button)) {
          attach(container, button);
        } else {
          btnDisplay = null;
          btnClass = "";
          switch (button) {
            case "ellipsis":
              btnDisplay = "&#x2026;";
              btnClass = "disabled";
              break;
            case "first":
              btnDisplay = lang.sFirst;
              btnClass = button + (page > 0 ? "" : " disabled");
              break;
            case "previous":
              btnDisplay = lang.sPrevious;
              btnClass = button + (page > 0 ? "" : " disabled");
              break;
            case "next":
              btnDisplay = lang.sNext;
              btnClass = button + (page < current - 1 ? "" : " disabled");
              break;
            case "last":
              btnDisplay = lang.sLast;
              btnClass = button + (page < current - 1 ? "" : " disabled");
              break;
            default:
              btnDisplay = settings.fnFormatNumber(button + 1);
              btnClass = page === button ? classes.sPageButtonActive : "";
          }
          if (btnDisplay !== null) {
            var node = $("<li>", {
              "class": classes.sPageButton + " " + btnClass,
              id: idx === 0 && typeof button === "string" ? settings.sTableId + "_" + button : null
            }).append(
              $("<a>", {
                href: "#",
                "aria-controls": settings.sTableId,
                "aria-label": aria[button],
                "data-dt-idx": counter,
                tabindex: settings.iTabIndex,
                "class": "page-link"
              }).html(btnDisplay)
            ).appendTo(container);
            settings.oApi._fnBindAction(node, { action: button }, clickHandler);
            counter++;
          }
        }
      }
    };

    try {
      var activeEl = $(host).find(document.activeElement).data("dt-idx");
    } catch (err) {}

    // Clear the host element and add a <ul> for pagination
    $(host).empty().html('<ul class="pagination"/>');
    attach($(host).children("ul"), buttons);

    if (activeEl !== undefined) {
      $(host).find("[data-dt-idx=" + activeEl + "]").trigger("focus");
    }
  };

  return DataTable;
});
